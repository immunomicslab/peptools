% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pep_encode2d.R
\name{pep_encode2d}
\alias{pep_encode2d}
\title{Encode a peptide}
\usage{
pep_encode2d(x, mat, n_pcs = 10, flatten = FALSE)
}
\arguments{
\item{x}{A character vector of peptides to be encoded}

\item{mat}{An encoding matrix, one of c("BLOSUM50", "BLOSUM62",
"BLOSUM50_pca", "BLOSUM62_pca", "ONEHOT_enc")}

\item{n_pcs}{The number of principle components used for encoding. Only
relevant if mat is one of c("BLOSUM50_pca", "BLOSUM62_pca")}

\item{flatten}{A logical, if FALSE (default) the full tensor will be
returned, if TRUE tensor will be flattened, such that each row
is a peptide and each column an encoding value. In essence,
each peptide image is flattened to a vector by concatenating
the rows in the encoded matrix constituting the image.}
}
\value{
A 3D array (tensor) of peptide 'images' with dimensions
number_of_peptides x length_peptides x length_encoding (20 aminoacids + X = 21)
}
\description{
Peptides are encoded using either the BLOSUM50, BLOSUM62 or a user specified
custom encoding matrix
}
\details{
Each position in the peptide become a vector of 21 values, corresponding to
the logarithm for the ratio of the likelihood of two amino acids appearing
with a biological sense and the likelihood of the same amino acids appearing
by chance. These values are then divided by 5 to accommodate scaled input,
to neural networks. \code{'X'} is encoded as the zero-vector.

The final result is a 3D array (tensor) of peptide 'images' with \code{n}
rows, \code{k} columns and \code{21} slices, which is stored as a 3D array
(tensor).
}
\examples{

peps = pep_ran(k = 9, n = 10)

X1 = pep_encode2d(peps, mat = "BLOSUM50")
dim(X1)

X2 = pep_encode2d(peps, mat = "BLOSUM62")
dim(X2)

X3 = pep_encode2d(peps, mat = "BLOSUM50_pca", n_pcs = 10)
dim(X3)

X4 = pep_encode2d(peps, mat = "BLOSUM62_pca", n_pcs = 10)
dim(X4)

X5 = pep_encode2d(peps, mat = "BLOSUM50_pca", n_pcs = 5)
dim(X5)

X6 = pep_encode2d(peps, mat = "BLOSUM62_pca", n_pcs = 5)
dim(X6)

custom_mat = round(matrix(data = rnorm(n = 441), nrow = 21, ncol = 21,
                          dimnames = list(c(AMINOACIDS$one, 'X'), c(AMINOACIDS$one, 'X'))), 2)
X7 = pep_encode2d(peps, mat = custom_mat)
dim(X7)

}
